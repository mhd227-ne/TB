// === üì¶ INSTALLATION DES MODULES REQUIS === // npm install telegraf dotenv ytdl-core node-fetch openai axios

require('dotenv').config(); const { Telegraf } = require('telegraf'); const ytdl = require('ytdl-core'); const fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args)); const fs = require('fs'); const path = require('path'); const axios = require('axios'); const { Configuration, OpenAIApi } = require('openai');

const bot = new Telegraf(process.env.BOT_TOKEN); const openai = new OpenAIApi(new Configuration({ apiKey: process.env.OPENAI_API_KEY }));

// === /start === bot.start(async (ctx) => { await ctx.replyWithPhoto( { url: 'https://files.catbox.moe/96cfkn.jpg' }, { caption: ‚ï≠‚îÄ‚îÄ‚îÄ„Äé ü§ñ *ùóßùóòùó¶ùóß ùóïùó¢ùóß* „Äè‚îÄ‚îÄ‚îÄ‚ïÆ ‚îÇ ‚îÇ üëã *Salut ${ctx.from.first_name || 'utilisateur'} !* ‚îÇ ‚îÇ Je suis un bot *multi-outils* styl√©, ‚îÇ cr√©√© par ùô∫ùô∞ùöÜùô∞ùô∫ùô∏¬≤¬≤7 üß† ‚îÇ ‚îÇ üîπ Tape */menu* pour voir mes commandes ‚îÇ üîπ Tape */kawaki* pour discuter avec l‚ÄôIA ‚îÇ üîπ Tape */youtube* ou */tiktok* pour t√©l√©charger ‚îÇ ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ„Äå üìå Powered by Kawaki „Äç‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ, parse_mode: 'Markdown', } ); });

// === /menu === bot.command('menu', async (ctx) => { await ctx.replyWithPhoto( { url: 'https://files.catbox.moe/xcqfiz.jpg' }, { caption: ` ‚ï≠‚îÄ‚îÄ‚îÄ„Äé üìú ùó†ùóòùó°ùó® ùóóùó® ùóïùó¢ùóß „Äè‚îÄ‚îÄ‚îÄ‚ïÆ ‚îÇ ü§ñ BOT: ùóûùóîùó™ùóîùóûùóú ùóïùó¢ùóß ‚îÇ üëë Cr√©ateur: ùô∫ùô∞ùöÜùô∞ùô∫ùô∏¬≤¬≤7 ‚îÇ üÜî Num√©ro: +22781289418 ‚îÇ üñ† GitHub: github.com/kawaki2000 ‚îÇ üí¨ Telegram: @kawaki227 ‚îÇ üîó Cha√Æne: Clique ici ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üåü COMMANDES DISPONIBLES : ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ üìÖ T√©l√©chargement : ‚Ä¢ /youtube [lien] ‚Ä¢ /song [lien] ‚Ä¢ /tiktok [lien] ‚Ä¢ /instagram [lien] ‚Ä¢ /pinterest [lien] ‚Ä¢ /imd [url image]

üß† Intelligence Artificielle : ‚Ä¢ /kawaki [ta question] ‚Ä¢ /talk [parle avec moi]

üîç Info : ‚Ä¢ /meinfo ‚Äì Infos perso ‚Ä¢ /channelinfo [@user] ‚Ä¢ /url [un lien]

üõÄ Logos (ephoto360) : ‚Ä¢ /dragonball, /neon1, /gold1, etc.

ü®ä Extra : ‚Ä¢ /logo [nom] ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ `, parse_mode: 'Markdown', } ); });

// === IA Kawaki === bot.command('kawaki', async (ctx) => { const prompt = ctx.message.text.split(' ').slice(1).join(' '); if (!prompt) return ctx.reply('üí¨ Pose une question apr√®s /kawaki');

const res = await openai.createChatCompletion({ model: 'gpt-4', messages: [{ role: 'user', content: prompt }], }); ctx.reply(res.data.choices[0].message.content); });

// === Downloader YouTube vid√©o === bot.command('youtube', async (ctx) => { const input = ctx.message.text.split(' ').slice(1).join(' '); if (!input || !ytdl.validateURL(input)) return ctx.reply('‚ùå Lien YouTube invalide.');

const info = await ytdl.getInfo(input); const title = info.videoDetails.title.replace(/[^ÔøΩ-]/g, '').substring(0, 30); const filePath = path.join(__dirname, ${title}.mp4);

const stream = ytdl(input, { quality: 'lowest' }); stream.pipe(fs.createWriteStream(filePath)).on('finish', async () => { await ctx.replyWithVideo({ source: filePath }, { caption: ‚úÖ ${title} }); fs.unlinkSync(filePath); }); });

// === T√©l√©charger audio === bot.command('song', async (ctx) => { const input = ctx.message.text.split(' ').slice(1).join(' '); if (!input || !ytdl.validateURL(input)) return ctx.reply('‚ùå Lien YouTube invalide.');

const title = 'song_' + Date.now(); const filePath = path.join(__dirname, ${title}.mp3);

const stream = ytdl(input, { filter: 'audioonly' }); stream.pipe(fs.createWriteStream(filePath)).on('finish', async () => { await ctx.replyWithAudio({ source: filePath }, { caption: 'üéµ Audio extrait avec succ√®s.' }); fs.unlinkSync(filePath); }); });

// === TikTok === bot.command('tiktok', async (ctx) => { const input = ctx.message.text.split(' ').slice(1).join(' '); if (!input.includes('tiktok')) return ctx.reply('‚ùå Lien TikTok invalide.');

try { const res = await fetch(https://tikwm.com/api/?url=${encodeURIComponent(input)}); const json = await res.json(); if (!json.data) return ctx.reply('‚ùå T√©l√©chargement √©chou√©.');

await ctx.replyWithVideo({ url: json.data.play }, { caption: `‚úÖ TikTok t√©l√©charg√©.` });

} catch (e) { ctx.reply('‚ùå Erreur lors du t√©l√©chargement.'); } });

// === Instagram === bot.command('instagram', async (ctx) => { const url = ctx.message.text.split(' ')[1]; if (!url || !url.includes('instagram')) return ctx.reply('‚ùå Lien Instagram invalide.');

try { const res = await axios.get('https://snapinsta.app/api/convert', { params: { url }, headers: { 'User-Agent': 'Mozilla/5.0' }, }); const videoUrl = res.data.url; await ctx.replyWithVideo({ url: videoUrl }, { caption: 'üì∏ Vid√©o Instagram t√©l√©charg√©e.' }); } catch (err) { ctx.reply('‚ùå Impossible de t√©l√©charger depuis Instagram.'); } });

// === Pinterest === bot.command('pinterest', async (ctx) => { const url = ctx.message.text.split(' ')[1]; if (!url || !url.includes('pinterest')) return ctx.reply('‚ùå Lien Pinterest invalide.'); await ctx.reply(üìå Voici ton lien pr√™t : ${url}); });

// === Image Direct === bot.command('imd', async (ctx) => { const imageUrl = ctx.message.text.split(' ')[1]; if (!imageUrl) return ctx.reply('‚ùå Fournis un lien direct vers l‚Äôimage.');

await ctx.replyWithPhoto({ url: imageUrl }, { caption: 'üñºÔ∏è Image t√©l√©charg√©e avec succ√®s !' }); });

// === URL Analyzer === bot.command('url', async (ctx) => { const url = ctx.message.text.split(' ')[1]; if (!url || !url.startsWith('http')) return ctx.reply('‚ùå Lien invalide.');

ctx.reply(üîç Analyse du lien : ${url}\n‚Ä¢ Domaine : ${new URL(url).hostname}); });

// === Me Info === bot.command('meinfo', (ctx) => { const user = ctx.from; ctx.reply(üë§ *Nom:* ${user.first_name} ${user.last_name || ''}\nüî∞ *Username:* @${user.username || 'N/A'}\nüÜî *ID:* ${user.id}, { parse_mode: 'Markdown', }); });

// === Channel Info === bot.command('channelinfo', async (ctx) => { const input = ctx.message.text.split(' ').slice(1).join(' '); if (!input) return ctx.reply('‚ö†Ô∏è Donne un @nom_de_chaine ou lien.');

try { const chat = await ctx.telegram.getChat(input); ctx.reply(üì¢ *Titre:* ${chat.title}\nüÜî *ID:* ${chat.id}\nüîó *Username:* ${chat.username ? '@' + chat.username : 'N/A'}, { parse_mode: 'Markdown', }); } catch (error) { ctx.reply('‚ùå Impossible d‚Äôobtenir les infos.'); } });

// === Talk / IA Clever === bot.command('talk', async (ctx) => { const prompt = ctx.message.text.split(' ').slice(1).join(' '); if (!prompt) return ctx.reply('‚ùì Tu veux qu‚Äôon parle de quoi ?');

const res = await openai.createChatCompletion({ model: 'gpt-4', messages: [{ role: 'user', content: prompt }], });

ctx.reply(üí¨ ${res.data.choices[0].message.content}); });

// === Logo simple (pilulier simul√©) === bot.command('logo', async (ctx) => { const name = ctx.message.text.split(' ').slice(1).join(' '); if (!name) return ctx.reply('‚ùå Donne un nom pour le logo.');

await ctx.replyWithPhoto( { url: https://dummyimage.com/400x200/000/fff&text=${encodeURIComponent(name)} }, { caption: 'üßä Logo g√©n√©r√©.' } ); });

// === D√©marrer le bot === bot.launch(); console.log('ü§ñ Kawaki Bot lanc√© avec succ√®s');

